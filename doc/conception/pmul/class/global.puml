@startuml

title Global diagram

class Observable{

}

package model{

    class ShipShop{
        + createGame(era: Era, tactic: Tactic)
        + placeShip(x: int, y: int, direction: DirectionConstant, ship: ShipType): UUID
        + placeShip(x: int, y: int, direction: DirectionConstant, id: UUID): UUID
        + endTurn(assailant: UUID, x: int, y: int): boolean
        + saveCurrentGame()
        + loadGame()
    }

    class GameFactory{
        + getPVEGame(): Game
        + getPVPGame(): Game
        + getEVEGame(): Game
    }

    class SaveManager{

    }

    enum UpdateObserver{
        ENDTURN
        PLACESHIP
        SAVE
        LOAD
        CHANGETACTIC
    }

    enum ShipType{
        CRUISER
        AIRCRAFT
        TORPEDO
        SUBMARINE
    }

    enum DirectionConstant{
        UP
        LEFT
        RIGHT
        DOWN
    }

    package game{

        abstract Game{
            + Game(era: Era)
            + endTurn(assailant: UUID, x: int, y: int): boolean
            + place(x: int, y: int, direction: DirectionConstant, ship: ShipType): UUID
            + place(x: int, y: int, direction: DirectionConstant, id: UUID): UUID
            + endTurn()
        }

        class GameWithIA{
            + Game(era: Era, tactic: Tactic)
        }

        class PlayerFactory{
            + getIA()
            + getHuman()
        }

        abstract Player{
            + getDmg(id: UUID): int
            + beAttacked(x: int, y: int, dmg: int): boolean
            + place(x: int, y: int, ship: ShipType)
            + isDefeated(): boolean
            + play()
        }

        package grid{

            abstract Grid{
                + beAttacked(x: int, y: int, dmg: int): boolean
                + moveShip(x: int, y: int, ship: Ship)
                + getDmg(id: UUID): int
                + isDefeated(): boolean
            }

            class SimpleGrid{

            }

            abstract Tile{
                - hasBeenHit: boolean
            }

            class SimpleTile{

            }

        }

        package ship{

            class Ship{

            }

            abstract FleetFactory{

            }

            class ModernFleet{

            }

            class XVIFleet{

            }

        }


        package era{

            class Era{
                - {final} name: String
                - Era(name: String)
                + getName(): String
            }

            class EraFactory{
                + getModernEra()
                + getXVIEra()
            }

        }

        package player{

            class IA{

            }

            package Tactic{

                interface Tactic{
                    + applyTactic(player: Player): (int, int, int)
                }

                class RandomTactic{
                    + applyTactic(player: Player)
                }

                class CrossTactic{
                    + applyTactic(player: Player)
                }

            }

            class Human{

            }

        }

    }

}


ShipShop --> "1" GameFactory: gameFactory
ShipShop --> "1" Game: - game
ShipShop --> "1" SaveManager: -saveManager
ShipShop -up-|> Observable

GameFactory ..> Game: create

Game --> "1" Player: - current
Game --> "1" Player: - next

Grid --> "*" Ship: - ships
Grid --> "*" Tile

FleetFactory ..> Ship: "create"

SimpleGrid --|> Grid
SimpleTile --|> Tile

PlayerFactory ..>  Player: "create"

Player --> "1" FleetFactory: - fleet
Player --> "1" Grid: -grid

GameWithIA --|> Game

EraFactory --> "1" Era: -modern
EraFactory --> "1" Era: -XVI

ModernFleet -up-|> FleetFactory
XVIFleet -up-|> FleetFactory

Human --|> Player

IA --|> Player
IA --> "1" Tactic: - tactic

RandomTactic ..|> Tactic
CrossTactic ..|> Tactic


@enduml