@startuml

title Global diagram

class Observable{
    + setChanged()
    + notifyObserver(arg: int)
}

package model{

    class Move{
        x: int
        y: int
        direction: DirectionConstant
        type: ShipType
        ship: UUID
    }

    class Attack{
        x: int
        y: int
        ship: UUID
    }

    class GameFactory{
        + getPVEGame(era: Era): Game
        + getEVPGame(era: Era): Game
    }

    enum UpdateObserver{
        ENDTURN
        PLACESHIP
        SAVE
        LOAD
        CHANGETACTIC
    }

    enum ShipType{
        CRUISER
        AIRCRAFT
        TORPEDO
        SUBMARINE
    }

    enum DirectionConstant{
        UP
        LEFT
        RIGHT
        DOWN
    }

    class ShipShop{
        + createGame(era: Era, tactic: Tactic)
        + placeShip(move: Move): UUID
        + setTactic(player: int, tactic: Tactic)
        + getShipSprite(type: ShipType): Image
        + play(attack: Attack)
        + save(file: File)
        + load(file: File): Game
    }

    package game{

        package era{

            class EraFactory{

            }

            abstract Era{
                + {abstract} getFleetFactory(): FleetFactory
                + {abstract} drawShip(type: ShipType): Image
            }

            class ModernEra{
                + getFleetFactory(): FleetFactory
                + drawShip(type: ShipType): Image
            }

            class XVIEra{
                + getFleetFactory(): FleetFactory
                + drawShip(type: ShipType): Image
            }

        }

        class Game{
            - currentPlayer: int
            + Game(era: Era, p1: Player, p2: Player)
            + setTactic(player: int, tactic: Tactic)
            + getShipSprite(type: ShipType): Image
            + placeShip(move: Move): UUID
            + play(attack: Attack)
            - next()
        }

        package grid{

            class Grid{
                - ennemyGrid: int[][]
                + beAttacked(x: int, y: int, dmg: int): boolean
                + placeShip(move: Move)
                + getDmg(id: UUID): int
                + isDefeated(): boolean
                + isShip(x: int, y: int)
                + hit(x: int, y: int)
            }

        }

        package ship{

            class Ship{

            }

            abstract FleetFactory{

            }

            class ModernFleet{

            }

            class XVIFleet{

            }

        }




        package player{

            class PlayerFactory{
                + getIA(era: Era)
                + getHuman(era: Era)
            }

            abstract Player{
                + getDmg(id: UUID): int
                + beAttacked(x: int, y: int, dmg: int): boolean
                + placeShip(move: Move): UUID
                + isDefeated(): boolean
                + play()
                + setTactic(tactic: Tactic)
                + {abstract} getBestMove(): Move
                + {abstract} isHuman(): boolean
            }

            class Human{
                + getBestMove(): Move
                + isHuman(): boolean
            }

            class IA{
                + getBestMove(): Move
                + isHuman(): boolean
            }

            package Tactic{

                interface Tactic{
                    + applyTactic(player: Player): (int, int, int)
                }

                class RandomTactic{
                    + applyTactic(player: Player)
                }

                class CrossTactic{
                    + applyTactic(player: Player)
                }

            }

        }

    }

}


ShipShop --> "1" GameFactory: gameFactory
ShipShop --> "1" Game: - game
ShipShop -up-|> Observable

GameFactory ..> Game: create

Game --> "2" Player: - players

Grid --> "*" Ship: - ships

FleetFactory ..> Ship: "create"

PlayerFactory ..>  Player: "create"

Player --> "1" FleetFactory: - fleet
Player --> "1" Grid: - grid

ModernFleet --|> FleetFactory
XVIFleet --|> FleetFactory

Human --|> Player

IA --|> Player
IA --> "1" Tactic: - tactic

RandomTactic ..|> Tactic
CrossTactic ..|> Tactic

Game --> "1" Era: - era
EraFactory ..> Era: create

ModernEra --|> Era
XVIEra --|> Era

@enduml